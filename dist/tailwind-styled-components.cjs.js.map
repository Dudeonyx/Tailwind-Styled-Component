{
  "version": 3,
  "sources": ["../src/index.ts", "../src/tailwind.tsx", "../src/domElements.ts"],
  "sourcesContent": ["import tw from \"./tailwind\"\r\n\r\nexport { tw as default }\r\n", "import React, { CSSProperties } from \"react\"\r\nimport domElements from \"./domElements\"\r\nimport { twMerge } from \"tailwind-merge\"\r\n\r\nconst isTwElement = Symbol(\"isTwElement?\")\r\n\r\nexport type IsTwElement = { [isTwElement]: true }\r\nexport type FalseyValue = undefined | null | false\r\n\r\nexport type FlattenInterpolation<P> = ReadonlyArray<Interpolation<P>>\r\nexport type InterpolationValue = string | number | FalseyValue | TailwindComponentInterpolation\r\n\r\nexport type Interpolation<P> = InterpolationValue | InterpolationFunction<P> | FlattenInterpolation<P>\r\n\r\nexport type InterpolationFunction<P> = (props: P) => Interpolation<P>\r\ntype TailwindComponentInterpolation = PickU<TailwindComponentBase<any, any>, keyof TailwindComponentBase<any, any>>\r\n\r\ntype IntrinsicElementsKeys = keyof JSX.IntrinsicElements\r\n\r\ntype IsAny<T, True, False = never> = True | False extends (T extends never ? True : False) ? True : False\r\n\r\nexport const mergeArrays = (template: TemplateStringsArray, templateElements: (string | undefined | null)[]) => {\r\n    return template.reduce(\r\n        (acc, c, i) => acc.concat(c || [], templateElements[i] || []), //  x || [] to remove false values e.g '', null, undefined. as Array.concat() ignores empty arrays i.e []\r\n        [] as string[]\r\n    )\r\n}\r\n\r\nexport const cleanTemplate = (template: Array<Interpolation<any>>, inheritedClasses: string = \"\") => {\r\n    const newClasses: string[] = template\r\n        .join(\" \")\r\n        .trim()\r\n        .replace(/\\n/g, \" \") // replace newline with space\r\n        .replace(/\\s{2,}/g, \" \") // replace line return by space\r\n        .split(\" \")\r\n        .filter((c) => c !== \",\") // remove comma introduced by template to string\r\n\r\n    const inheritedClassesArray: string[] = inheritedClasses ? inheritedClasses.split(\" \") : []\r\n\r\n    return twMerge(\r\n        ...newClasses\r\n            .concat(inheritedClassesArray) // add new classes to inherited classes\r\n            .filter((c: string) => c !== \" \") // remove empty classes\r\n    )\r\n}\r\n\r\nexport type PickU<T, K extends keyof T> = T extends any ? { [P in K]: T[P] } : never\r\n// export type OmitU<T, K extends keyof T> = T extends any ? PickU<T, Exclude<keyof T, K>> : never\r\nexport type RemoveIndex<T> = {\r\n    [K in keyof T as string extends K ? never : number extends K ? never : K]: T[K]\r\n}\r\n\r\n/**\r\n * ForwardRef typings\r\n */\r\nexport type TailwindExoticComponent<P> = PickU<\r\n    React.ForwardRefExoticComponent<P>,\r\n    keyof React.ForwardRefExoticComponent<any>\r\n>\r\n\r\ntype MergeProps<O extends object, P extends {} = {}> =\r\n    // Distribute unions early to avoid quadratic expansion\r\n    P extends any ? IsAny<P, RemoveIndex<P> & O, P & O> : never\r\n// RemoveIndex<P> is used to make React.ComponentPropsWithRef typesafe on Tailwind components, delete if causing issues\r\n\r\ntype TailwindPropHelper<\r\n    P,\r\n    O extends object = {}\r\n    // PickU is needed here to make $as typing work\r\n> = PickU<MergeProps<O, P>, keyof MergeProps<O, P>>\r\n\r\ntype TailwindComponentPropsWith$As<\r\n    P extends object,\r\n    O extends object,\r\n    $As extends string | React.ComponentType<any> = React.ComponentType<P>,\r\n    P2 = $As extends AnyTailwindComponent\r\n        ? TailwindComponentAllInnerProps<$As>\r\n        : $As extends IntrinsicElementsKeys | React.ComponentType<any>\r\n        ? React.ComponentPropsWithRef<$As>\r\n        : never\r\n> = P & O & TailwindPropHelper<P2> & { $as?: $As }\r\n\r\n/**\r\n * An interface represent a component styled by tailwind-styled-components\r\n *\r\n * @export\r\n * @interface TailwindComponent\r\n * @template P The base react props\r\n * @template O The props added with the template function.\r\n */\r\nexport type TailwindComponent<P extends object, O extends object = {}> = IsTwElement &\r\n    TailwindComponentBase<P, O> &\r\n    WithStyle<P, O>\r\n\r\n/**\r\n * An interface represent a component styled by tailwind-styled-components\r\n *\r\n * @export\r\n * @interface TailwindComponentBase\r\n * @extends {TailwindExoticComponent<TailwindPropHelper<P, O>>}\r\n * @template P The base react props\r\n * @template O The props added with the template function.\r\n */\r\nexport interface TailwindComponentBase<P extends object, O extends object = {}>\r\n    extends TailwindExoticComponent<TailwindPropHelper<P, O>> {\r\n    // add our own fake call signature to implement the polymorphic '$as' prop\r\n    (props: TailwindPropHelper<P, O> & { $as?: never | undefined }): React.ReactElement<TailwindPropHelper<P, O>>\r\n\r\n    <$As extends string | React.ComponentType<any> = React.ComponentType<P>>(\r\n        props: TailwindComponentPropsWith$As<P, O, $As>\r\n    ): React.ReactElement<TailwindComponentPropsWith$As<P, O, $As>>\r\n}\r\n/**\r\n *  An interface represent withStyle functionality\r\n *\r\n * @export\r\n * @interface WithStyle\r\n * @template P\r\n * @template O\r\n */\r\nexport interface WithStyle<P extends object, O extends object = {}> {\r\n    withStyle: <S extends object = {}>(\r\n        styles: CSSProperties | ((p: P & O & S) => CSSProperties)\r\n    ) => TailwindComponent<P, O & S>\r\n}\r\n/**\r\n * Generice TailwindComponent\r\n */\r\ntype AnyTailwindComponent = TailwindComponent<any, any>\r\n\r\n/**\r\n * A template function that accepts a template literal of tailwind classes and returns a tailwind-styled-component\r\n *\r\n * @export\r\n * @interface TemplateFunction\r\n * @template E\r\n */\r\nexport interface TemplateFunction<P extends object, O extends object = {}> {\r\n    (template: TemplateStringsArray): TailwindComponent<P, O>\r\n    (\r\n        template: TemplateStringsArray | InterpolationFunction<P & O>,\r\n        ...rest: Array<Interpolation<P & O>>\r\n    ): TailwindComponent<P, O>\r\n    <K extends object>(\r\n        template: TemplateStringsArray | InterpolationFunction<P & O & K>,\r\n        ...rest: Array<Interpolation<P & O & K>>\r\n    ): TailwindComponent<P, O & K>\r\n}\r\n\r\n/**\r\n * A utility function that strips out transient props from a [key,value] array of props\r\n *\r\n * @param {[string, any]} [key]\r\n * @return boolean\r\n */\r\nconst removeTransientProps = ([key]: [string, any]): boolean => key.charAt(0) !== \"$\"\r\n\r\nexport type TailwindComponentInnerProps<C extends AnyTailwindComponent> = C extends TailwindComponent<infer P, any>\r\n    ? P\r\n    : never\r\n\r\nexport type TailwindComponentInnerOtherProps<C extends AnyTailwindComponent> = C extends TailwindComponent<any, infer O>\r\n    ? O\r\n    : never\r\n\r\nexport type TailwindComponentAllInnerProps<C extends AnyTailwindComponent> = TailwindComponentInnerProps<C> &\r\n    TailwindComponentInnerOtherProps<C>\r\n\r\nexport type IntrinsicElementsTemplateFunctionsMap = {\r\n    [RTag in keyof JSX.IntrinsicElements]: TemplateFunction<JSX.IntrinsicElements[RTag]>\r\n}\r\n\r\n/**\r\n *\r\n *\r\n * @export\r\n * @interface TailwindInterface\r\n * @extends {IntrinsicElementsTemplateFunctionsMap}\r\n */\r\nexport interface TailwindInterface extends IntrinsicElementsTemplateFunctionsMap {\r\n    <C extends TailwindComponent<any, any>>(component: C): TemplateFunction<\r\n        TailwindComponentInnerProps<C>,\r\n        TailwindComponentInnerOtherProps<C>\r\n    >\r\n    <C extends React.ComponentType<any>>(component: C): TemplateFunction<\r\n        // Prevent functional components without props infering props as `unknown`\r\n        C extends (P?: never) => any ? {} : React.ComponentPropsWithoutRef<C>\r\n    >\r\n\r\n    <C extends keyof JSX.IntrinsicElements>(component: C): TemplateFunction<JSX.IntrinsicElements[C]>\r\n}\r\n\r\nconst isTw = (c: any): c is AnyTailwindComponent => c[isTwElement] === true\r\n\r\n// type FDF = React.ElementType<JSX.IntrinsicElements['div']>\r\n\r\nconst templateFunctionFactory: TailwindInterface = (<C extends React.ElementType>(Element: C): any => {\r\n    return (template: TemplateStringsArray, ...templateElements: ((props: any) => string | undefined | null)[]) => {\r\n        const TwComponentConstructor = (styleArray: (CSSProperties | ((p: any) => CSSProperties))[] = []) => {\r\n            // const renderFunction =\r\n            const TwComponent: any = React.forwardRef((baseProps: any, ref: any): JSX.Element => {\r\n                const { $as = Element, style = {}, ...props } = baseProps\r\n\r\n                // set FinalElement based on if Element is a TailwindComponent, $as defaults to Element if undefined\r\n                const FinalElement = isTw(Element) ? Element : $as\r\n\r\n                const withStyles: CSSProperties = styleArray\r\n                    ? styleArray.reduce<CSSProperties>(\r\n                          (acc, intStyle) =>\r\n                              Object.assign(acc, typeof intStyle === \"function\" ? intStyle(baseProps) : intStyle),\r\n                          {} as CSSProperties\r\n                      )\r\n                    : {}\r\n                // const style = TwComponent.style(props)\r\n\r\n                // filter out props that starts with \"$\" props except when styling a tailwind-styled-component\r\n                const filteredProps = isTw(FinalElement)\r\n                    ? props\r\n                    : (Object.fromEntries(Object.entries(props).filter(removeTransientProps)) as any)\r\n                return (\r\n                    <FinalElement\r\n                        // forward props\r\n                        {...filteredProps}\r\n                        style={{ ...withStyles, ...style }}\r\n                        // forward ref\r\n                        ref={ref}\r\n                        // set class names\r\n                        className={cleanTemplate(\r\n                            mergeArrays(\r\n                                template,\r\n                                templateElements.map((t) => t({ ...props, $as }))\r\n                            ),\r\n                            props.className\r\n                        )}\r\n                        // forward $as prop when styling a tailwind-styled-component\r\n                        {...(isTw(Element) ? { $as } : {})}\r\n                    />\r\n                )\r\n            }) as any\r\n            // symbol identifier for detecting tailwind-styled-components\r\n            TwComponent[isTwElement] = true\r\n            // This enables the react tree to show a name in devtools, much better debugging experience Note: Far from perfect, better implementations welcome\r\n            if (typeof Element !== \"string\") {\r\n                TwComponent.displayName = (Element as any).displayName || (Element as any).name || \"tw.Component\"\r\n            } else {\r\n                TwComponent.displayName = \"tw.\" + Element\r\n            }\r\n            TwComponent.withStyle = (styles: ((p: any) => CSSProperties) | CSSProperties) =>\r\n                TwComponentConstructor(styleArray.concat(styles)) as any\r\n\r\n            return TwComponent\r\n        }\r\n        return TwComponentConstructor()\r\n    }\r\n}) as any\r\n\r\nconst intrinsicElementsMap: IntrinsicElementsTemplateFunctionsMap = domElements.reduce(\r\n    <K extends IntrinsicElementsKeys>(acc: IntrinsicElementsTemplateFunctionsMap, DomElement: K) => ({\r\n        ...acc,\r\n        [DomElement]: templateFunctionFactory(DomElement)\r\n    }),\r\n    {} as IntrinsicElementsTemplateFunctionsMap\r\n)\r\n\r\nconst tw: TailwindInterface = Object.assign(templateFunctionFactory, intrinsicElementsMap)\r\n\r\nexport default tw\r\n", "const elementsArray: (keyof JSX.IntrinsicElements)[] = [\r\n    \"a\",\r\n    \"abbr\",\r\n    \"address\",\r\n    \"area\",\r\n    \"article\",\r\n    \"aside\",\r\n    \"audio\",\r\n    \"b\",\r\n    \"base\",\r\n    \"bdi\",\r\n    \"bdo\",\r\n    \"big\",\r\n    \"blockquote\",\r\n    \"body\",\r\n    \"br\",\r\n    \"button\",\r\n    \"canvas\",\r\n    \"caption\",\r\n    \"cite\",\r\n    \"code\",\r\n    \"col\",\r\n    \"colgroup\",\r\n    \"data\",\r\n    \"datalist\",\r\n    \"dd\",\r\n    \"del\",\r\n    \"details\",\r\n    \"dfn\",\r\n    \"dialog\",\r\n    \"div\",\r\n    \"dl\",\r\n    \"dt\",\r\n    \"em\",\r\n    \"embed\",\r\n    \"fieldset\",\r\n    \"figcaption\",\r\n    \"figure\",\r\n    \"footer\",\r\n    \"form\",\r\n    \"h1\",\r\n    \"h2\",\r\n    \"h3\",\r\n    \"h4\",\r\n    \"h5\",\r\n    \"h6\",\r\n    \"head\",\r\n    \"header\",\r\n    \"hgroup\",\r\n    \"hr\",\r\n    \"html\",\r\n    \"i\",\r\n    \"iframe\",\r\n    \"img\",\r\n    \"input\",\r\n    \"ins\",\r\n    \"kbd\",\r\n    \"keygen\",\r\n    \"label\",\r\n    \"legend\",\r\n    \"li\",\r\n    \"link\",\r\n    \"main\",\r\n    \"map\",\r\n    \"mark\",\r\n    \"menu\",\r\n    \"menuitem\",\r\n    \"meta\",\r\n    \"meter\",\r\n    \"nav\",\r\n    \"noscript\",\r\n    \"object\",\r\n    \"ol\",\r\n    \"optgroup\",\r\n    \"option\",\r\n    \"output\",\r\n    \"p\",\r\n    \"param\",\r\n    \"picture\",\r\n    \"pre\",\r\n    \"progress\",\r\n    \"q\",\r\n    \"rp\",\r\n    \"rt\",\r\n    \"ruby\",\r\n    \"s\",\r\n    \"samp\",\r\n    \"script\",\r\n    \"section\",\r\n    \"select\",\r\n    \"small\",\r\n    \"source\",\r\n    \"span\",\r\n    \"strong\",\r\n    \"style\",\r\n    \"sub\",\r\n    \"summary\",\r\n    \"sup\",\r\n    \"table\",\r\n    \"tbody\",\r\n    \"td\",\r\n    \"textarea\",\r\n    \"tfoot\",\r\n    \"th\",\r\n    \"thead\",\r\n    \"time\",\r\n    \"title\",\r\n    \"tr\",\r\n    \"track\",\r\n    \"u\",\r\n    \"ul\",\r\n    \"var\",\r\n    \"video\",\r\n    \"wbr\",\r\n\r\n    // SVG\r\n    \"circle\",\r\n    \"clipPath\",\r\n    \"defs\",\r\n    \"ellipse\",\r\n    \"foreignObject\",\r\n    \"g\",\r\n    \"image\",\r\n    \"line\",\r\n    \"linearGradient\",\r\n    \"marker\",\r\n    \"mask\",\r\n    \"path\",\r\n    \"pattern\",\r\n    \"polygon\",\r\n    \"polyline\",\r\n    \"radialGradient\",\r\n    \"rect\",\r\n    \"stop\",\r\n    \"svg\",\r\n    \"text\",\r\n    \"tspan\"\r\n]\r\n\r\nexport default elementsArray\r\n"],
  "mappings": "qrBAAA,8BCAA,MAAqC,oBCArC,GAAM,GAAiD,CACnD,IACA,OACA,UACA,OACA,UACA,QACA,QACA,IACA,OACA,MACA,MACA,MACA,aACA,OACA,KACA,SACA,SACA,UACA,OACA,OACA,MACA,WACA,OACA,WACA,KACA,MACA,UACA,MACA,SACA,MACA,KACA,KACA,KACA,QACA,WACA,aACA,SACA,SACA,OACA,KACA,KACA,KACA,KACA,KACA,KACA,OACA,SACA,SACA,KACA,OACA,IACA,SACA,MACA,QACA,MACA,MACA,SACA,QACA,SACA,KACA,OACA,OACA,MACA,OACA,OACA,WACA,OACA,QACA,MACA,WACA,SACA,KACA,WACA,SACA,SACA,IACA,QACA,UACA,MACA,WACA,IACA,KACA,KACA,OACA,IACA,OACA,SACA,UACA,SACA,QACA,SACA,OACA,SACA,QACA,MACA,UACA,MACA,QACA,QACA,KACA,WACA,QACA,KACA,QACA,OACA,QACA,KACA,QACA,IACA,KACA,MACA,QACA,MAGA,SACA,WACA,OACA,UACA,gBACA,IACA,QACA,OACA,iBACA,SACA,OACA,OACA,UACA,UACA,WACA,iBACA,OACA,OACA,MACA,OACA,SAGG,EAAQ,EDzIf,MAAwB,0BAElB,EAAc,OAAO,gBAiBd,EAAc,CAAC,EAAgC,IACjD,EAAS,OACZ,CAAC,EAAK,EAAG,IAAM,EAAI,OAAO,GAAK,GAAI,EAAiB,IAAM,IAC1D,IAIK,EAAgB,CAAC,EAAqC,EAA2B,KAAO,CACjG,GAAM,GAAuB,EACxB,KAAK,KACL,OACA,QAAQ,MAAO,KACf,QAAQ,UAAW,KACnB,MAAM,KACN,OAAO,AAAC,GAAM,IAAM,KAEnB,EAAkC,EAAmB,EAAiB,MAAM,KAAO,GAEzF,MAAO,cACH,GAAG,EACE,OAAO,GACP,OAAO,AAAC,GAAc,IAAM,OAiHnC,EAAuB,CAAC,CAAC,KAAiC,EAAI,OAAO,KAAO,IAqC5E,EAAO,AAAC,GAAsC,EAAE,KAAiB,GAIjE,EAA8C,AAA8B,GACvE,CAAC,KAAmC,IAAoE,CAC3G,GAAM,GAAyB,CAAC,EAA8D,KAAO,CAEjG,GAAM,GAAmB,UAAM,WAAW,CAAC,EAAgB,IAA0B,CACjF,GAAM,CAAE,MAAM,EAAS,QAAQ,MAAO,GAAU,EAG1C,EAAe,EAAK,GAAW,EAAU,EAEzC,EAA4B,EAC5B,EAAW,OACP,CAAC,EAAK,IACF,OAAO,OAAO,EAAK,MAAO,IAAa,WAAa,EAAS,GAAa,GAC9E,IAEJ,GAIA,EAAgB,EAAK,GACrB,EACC,OAAO,YAAY,OAAO,QAAQ,GAAO,OAAO,IACvD,MACI,yBAAC,EAAD,IAEQ,EACJ,MAAO,IAAK,KAAe,GAE3B,IAAK,EAEL,UAAW,EACP,EACI,EACA,EAAiB,IAAI,AAAC,GAAM,EAAE,IAAK,EAAO,UAE9C,EAAM,cAGL,EAAK,GAAW,CAAE,OAAQ,OAK3C,SAAY,GAAe,GAE3B,AAAI,MAAO,IAAY,SACnB,EAAY,YAAe,EAAgB,aAAgB,EAAgB,MAAQ,eAEnF,EAAY,YAAc,MAAQ,EAEtC,EAAY,UAAY,AAAC,GACrB,EAAuB,EAAW,OAAO,IAEtC,GAEX,MAAO,MAIT,EAA8D,EAAY,OAC5E,CAAkC,EAA4C,IAAmB,KAC1F,GACF,GAAa,EAAwB,KAE1C,IAGE,EAAwB,OAAO,OAAO,EAAyB,GAE9D,EAAQ",
  "names": []
}
